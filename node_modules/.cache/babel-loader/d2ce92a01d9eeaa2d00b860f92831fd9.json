{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\nimport resizeChart from \"@/mixins/resizeChart\";\nimport * as echarts from 'echarts';\nimport PriceChartWrapper from \"@/components/universal/Charts/PriceChartWrapper\";\nexport default {\n  name: \"PriceChart\",\n  components: {\n    PriceChartWrapper\n  },\n  mixins: [resizeChart],\n  props: {\n    lineData: {\n      type: Array,\n      default: () => []\n    },\n    lineColor: {\n      type: String,\n      default: '#28A946'\n    },\n    stepLineData: {\n      type: Array,\n      default: () => []\n    },\n    stepLineColor: {\n      type: String,\n      default: '#0770FF'\n    }\n  },\n\n  data() {\n    const self = this;\n    return {\n      xAxisMarkerLineData: [],\n      xAxisData: [],\n      priceOptions: {\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid: {\n          show: true,\n          left: '2%',\n          right: '1%',\n          bottom: '3%',\n          top: '2%',\n          containLabel: true,\n          backgroundColor: 'rgba(250,250,252,0.5)'\n        },\n        xAxis: {\n          type: 'category',\n          data: [],\n          boundaryGap: false,\n          axisLabel: {\n            formatter: params => {\n              return new Date(params).toLocaleDateString('en-us', {\n                month: \"short\",\n                day: \"numeric\"\n              });\n            },\n            fontSize: 10,\n            align: 'center'\n          }\n        },\n        yAxis: {\n          max: 300,\n          type: 'value',\n          position: 'right',\n          axisLabel: {\n            fontSize: 10\n          }\n        },\n        series: [{\n          name: 'Fake Data',\n          type: 'line',\n          smooth: true,\n          symbol: 'none',\n          symbolSize: 4,\n          sampling: 'average',\n          markLine: {\n            symbol: ['none', 'none'],\n            label: {\n              show: false\n            },\n            lineStyle: {\n              color: '#e1e1e1',\n              type: 'solid'\n            },\n            data: []\n          },\n          lineStyle: {\n            color: self?.lineColor\n          },\n          itemStyle: {\n            color: self?.stepLineColor\n          },\n          stack: 'a',\n          areaStyle: {\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: 'rgba(40, 180, 62, 0.25)'\n            }, {\n              offset: 1,\n              color: 'rgba(40, 180, 62, 0)'\n            }])\n          },\n          data: [70, 90, 70, 97, 35, 145, 120, 50, 90, 60, 57, 55, 125, 110, 70, 60, 70, 77, 65, 105, 110]\n        }, {\n          name: 'Step Start',\n          type: 'line',\n          step: 'start',\n          symbol: 'none',\n          lineStyle: {\n            color: self?.stepLineColor\n          },\n          data: [80, 80, 50, 67, 45, 115, 100, 60, 80, 50, 67, 45, 115, 100, 60, 80, 50, 67, 45, 115, 100]\n        }]\n      }\n    };\n  },\n\n  methods: {\n    generateXAxisMarker() {\n      const arrayLength = this.priceOptions.series[0]?.data?.length;\n\n      if (arrayLength) {\n        for (let i = 0; i <= arrayLength; i++) {\n          this.xAxisMarkerLineData.push({\n            xAxis: i\n          });\n        }\n\n        const [firstSeriesElement] = this.priceOptions.series;\n        firstSeriesElement.markLine.data = this.xAxisMarkerLineData;\n      }\n    },\n\n    generateXAxisData() {\n      const arrayLength = this.priceOptions.series[0]?.data?.length;\n\n      if (arrayLength) {\n        const currentMonth = new Date().getMonth() + 1;\n        const dateOptions = {\n          month: 'long',\n          day: 'numeric'\n        };\n\n        for (let i = 1; i <= arrayLength; i++) {\n          const date = new Date(`2022-${currentMonth}-${i}`).toLocaleDateString(\"en-US\", dateOptions);\n          this.xAxisData.push(date);\n        }\n\n        this.priceOptions.xAxis.data = this.xAxisData;\n      }\n    }\n\n  },\n\n  mounted() {\n    this.setRefElement('priceChart');\n    this.generateXAxisMarker();\n    this.generateXAxisData();\n  }\n\n};","map":{"version":3,"mappings":";;;;;;;AAQA;AACA;AACA;AAEA;EACAA,kBADA;EAEAC;IAAAC;EAAA,CAFA;EAGAC,qBAHA;EAKAC;IACAC;MACAC,WADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAC;IAFA,CALA;IASAE;MACAH,WADA;MAEAC;IAFA,CATA;IAaAG;MACAJ,YADA;MAEAC;IAFA;EAbA,CALA;;EAuBAI;IACA;IACA;MACAC,uBADA;MAEAC,aAFA;MAGAC;QACAC;UACAC;QADA,CADA;QAIAC;UACAC,UADA;UAEAC,UAFA;UAGAC,WAHA;UAIAC,YAJA;UAKAC,SALA;UAMAC,kBANA;UAOAC;QAPA,CAJA;QAaAC;UACAnB,gBADA;UAEAK,QAFA;UAGAe,kBAHA;UAIAC;YACAC;cACA;gBAAAC;gBAAAC;cAAA;YACA,CAHA;YAIAC,YAJA;YAKAC;UALA;QAJA,CAbA;QAyBAC;UACAC,QADA;UAEA5B,aAFA;UAGA6B,iBAHA;UAIAR;YACAI;UADA;QAJA,CAzBA;QAiCAK,SACA;UACApC,iBADA;UAEAM,YAFA;UAGA+B,YAHA;UAIAC,cAJA;UAKAC,aALA;UAMAC,mBANA;UAOAC;YACAH,wBADA;YAEAI;cAAAxB;YAAA,CAFA;YAGAyB;cACAC,gBADA;cAEAtC;YAFA,CAHA;YAOAK;UAPA,CAPA;UAgBAgC;YACAC;UADA,CAhBA;UAmBAC;YACAD;UADA,CAnBA;UAsBAE,UAtBA;UAuBAC;YACAH,uDACA;cACAI,SADA;cAEAJ;YAFA,CADA,EAKA;cACAI,SADA;cAEAJ;YAFA,CALA;UADA,CAvBA;UAmCAjC;QAnCA,CADA,EAsCA;UACAX,kBADA;UAEAM,YAFA;UAGA2C,aAHA;UAIAX,cAJA;UAKAK;YACAC;UADA,CALA;UAQAjC;QARA,CAtCA;MAjCA;IAHA;EAuFA,CAhHA;;EAiHAuC;IACAC;MACA;;MACA;QACA;UACA;YACA1B;UADA;QAGA;;QACA;QACA2B;MACA;IACA,CAZA;;IAaAC;MACA;;MACA;QACA;QACA;UAAAxB;UAAAC;QAAA;;QAEA;UACA;UACA;QACA;;QAEA;MACA;IACA;;EA1BA,CAjHA;;EA6IAwB;IACA;IACA;IACA;EACA;;AAjJA","names":["name","components","PriceChartWrapper","mixins","props","lineData","type","default","lineColor","stepLineData","stepLineColor","data","xAxisMarkerLineData","xAxisData","priceOptions","tooltip","trigger","grid","show","left","right","bottom","top","containLabel","backgroundColor","xAxis","boundaryGap","axisLabel","formatter","month","day","fontSize","align","yAxis","max","position","series","smooth","symbol","symbolSize","sampling","markLine","label","lineStyle","color","itemStyle","stack","areaStyle","offset","step","methods","generateXAxisMarker","firstSeriesElement","generateXAxisData","mounted"],"sourceRoot":"src/components/universal/Charts","sources":["PriceChart.vue"],"sourcesContent":["<template>\n  <PriceChartWrapper class=\"relative\">\n    <img class=\"absolute z-50 left-4 top-24 lg:left-[2.2rem] lg:top-[4.4rem]\" :src=\"require('@/assets/img/logos/logo-chart.svg')\"/>\n    <v-chart ref=\"priceChart\" class=\"h-[15rem] md:h-[26.25rem]\" :option=\"priceOptions\"/>\n  </PriceChartWrapper>\n</template>\n\n<script>\nimport resizeChart from \"@/mixins/resizeChart\";\nimport * as echarts from 'echarts';\nimport PriceChartWrapper from \"@/components/universal/Charts/PriceChartWrapper\";\n\nexport default {\n  name: \"PriceChart\",\n  components: { PriceChartWrapper },\n  mixins: [ resizeChart ],\n\n  props: {\n    lineData: {\n      type: Array,\n      default : () => []\n    },\n    lineColor: {\n      type: String,\n      default: '#28A946'\n    },\n    stepLineData: {\n      type: Array,\n      default : () => []\n    },\n    stepLineColor: {\n      type: String,\n      default: '#0770FF'\n    },\n  },\n  data() {\n    const self = this\n    return {\n        xAxisMarkerLineData: [],\n        xAxisData: [],\n        priceOptions: {\n          tooltip: {\n            trigger: 'axis'\n          },\n          grid: {\n            show: true,\n            left: '2%',\n            right: '1%',\n            bottom: '3%',\n            top: '2%',\n            containLabel: true,\n            backgroundColor: 'rgba(250,250,252,0.5)',\n          },\n          xAxis: {\n            type: 'category',\n            data: [],\n            boundaryGap: false,\n            axisLabel: {\n              formatter: params => {\n                return new Date(params).toLocaleDateString('en-us', { month:\"short\", day:\"numeric\"})\n              },\n              fontSize: 10,\n              align: 'center'\n            }\n          },\n          yAxis: {\n            max: 300,\n            type: 'value',\n            position: 'right',\n            axisLabel: {\n              fontSize: 10\n            }\n          },\n          series: [\n            {\n              name: 'Fake Data',\n              type: 'line',\n              smooth: true,\n              symbol: 'none',\n              symbolSize: 4,\n              sampling: 'average',\n              markLine: {\n                symbol: ['none', 'none'],\n                label: {show: false},\n                lineStyle: {\n                  color: '#e1e1e1',\n                  type: 'solid',\n                },\n                data: []\n              },\n              lineStyle: {\n                color: self?.lineColor\n              },\n              itemStyle: {\n                color: self?.stepLineColor\n              },\n              stack: 'a',\n              areaStyle: {\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                  {\n                    offset: 0,\n                    color: 'rgba(40, 180, 62, 0.25)'\n                  },\n                  {\n                    offset: 1,\n                    color: 'rgba(40, 180, 62, 0)'\n                  }\n                ])\n              },\n              data: [70, 90, 70, 97, 35, 145, 120, 50, 90, 60, 57, 55, 125, 110, 70, 60, 70, 77, 65, 105, 110],\n            },\n            {\n              name: 'Step Start',\n              type: 'line',\n              step: 'start',\n              symbol: 'none',\n              lineStyle: {\n                color: self?.stepLineColor\n              },\n              data: [80, 80, 50, 67, 45, 115, 100, 60, 80, 50, 67, 45, 115, 100, 60, 80, 50, 67, 45, 115, 100]\n            }\n          ]\n        }\n    }\n  },\n  methods: {\n    generateXAxisMarker () {\n      const arrayLength = this.priceOptions.series[0]?.data?.length\n      if(arrayLength) {\n        for (let i = 0; i <= arrayLength; i++) {\n          this.xAxisMarkerLineData.push({\n            xAxis: i\n          })\n        }\n        const [firstSeriesElement] = this.priceOptions.series\n        firstSeriesElement.markLine.data = this.xAxisMarkerLineData\n      }\n    },\n    generateXAxisData () {\n      const arrayLength = this.priceOptions.series[0]?.data?.length\n      if(arrayLength) {\n        const currentMonth = new Date().getMonth() + 1\n        const dateOptions = { month: 'long', day: 'numeric' }\n\n        for (let i = 1; i <= arrayLength; i++) {\n          const date = new Date(`2022-${currentMonth}-${i}`).toLocaleDateString(\"en-US\", dateOptions)\n          this.xAxisData.push(date)\n        }\n\n        this.priceOptions.xAxis.data = this.xAxisData\n      }\n    }\n  },\n  mounted() {\n    this.setRefElement('priceChart')\n    this.generateXAxisMarker()\n    this.generateXAxisData()\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}
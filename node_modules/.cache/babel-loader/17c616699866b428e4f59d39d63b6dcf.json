{"ast":null,"code":"//\n//\n//\n//\nimport resizeChart from \"@/mixins/resizeChart\";\nexport default {\n  name: \"NetworkingChart\",\n  mixins: [resizeChart],\n  props: {\n    areaColor: {\n      type: String,\n      default: '#5B6270'\n    },\n    lineColor: {\n      type: String,\n      default: ''\n    },\n    dataValue: {\n      type: Array,\n      default: () => [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000]\n    }\n  },\n\n  data() {\n    const self = this;\n    return {\n      networkingOptions: {\n        radar: {\n          axisName: {\n            color: \"#1B2230\",\n            fontSize: 10\n          },\n          axisLine: {\n            lineStyle: {\n              color: '#DBDDE4'\n            }\n          },\n          splitLine: {\n            lineStyle: {\n              color: '#DBDDE4'\n            }\n          },\n          splitArea: {\n            areaStyle: {\n              color: ['rgba(236,236,244,0.5)'],\n              shadowColor: 'rgba(0, 0, 0, 0.2)'\n            }\n          },\n          indicator: [{\n            name: 'Sentiment',\n            max: 10000\n          }, {\n            name: 'Market Dynamics',\n            max: 10000\n          }, {\n            name: 'Cash Mngmt',\n            max: 10000\n          }, {\n            name: 'Dividends',\n            max: 10000\n          }, {\n            name: 'Technicals',\n            max: 10000\n          }, {\n            name: 'Structure',\n            max: 10000\n          }, {\n            name: 'Valuation',\n            max: 10000\n          }, {\n            name: 'Operations',\n            max: 10000\n          }]\n        },\n        series: [{\n          emphasis: {\n            lineStyle: {\n              width: 4\n            }\n          },\n          itemStyle: {\n            color: self?.lineColor\n          },\n          name: 'Budget vs spending',\n          type: 'radar',\n          data: [{\n            value: self?.dataValue,\n            name: 'Allocated Budget',\n            areaStyle: {\n              color: self?.areaColor,\n              opacity: '0.12'\n            }\n          }]\n        }]\n      }\n    };\n  },\n\n  methods: {\n    onRendered() {}\n\n  },\n\n  mounted() {\n    this.resizeChart('networkingChart');\n    const allText = this.$refs.networkingChart.$el.querySelectorAll('svg text');\n    const deg = 360 / allText.length;\n    allText.forEach((text, index) => {\n      const degrees = deg * index > 90 && deg * index < 270 ? -(deg * index) - 180 : -(deg * index);\n      const attributeValue = `${text.getAttribute('transform')} rotate(${degrees})`;\n      text.setAttribute('transform', attributeValue);\n      text.setAttribute('text-anchor', 'middle');\n    });\n  }\n\n};","map":{"version":3,"mappings":";;;;AAKA;AACA;EACAA,uBADA;EAEAC,qBAFA;EAGAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAC;IAFA,CALA;IASAE;MACAH,WADA;MAEAC;IAFA;EATA,CAHA;;EAiBAG;IACA;IACA;MACAC;QACAC;UACAC;YACAC,gBADA;YAEAC;UAFA,CADA;UAKAC;YACAC;cACAH;YADA;UADA,CALA;UAUAI;YACAD;cACAH;YADA;UADA,CAVA;UAeAK;YACAC;cACAN,gCADA;cAEAO;YAFA;UADA,CAfA;UAqBAC,YACA;YAAApB;YAAAqB;UAAA,CADA,EAEA;YAAArB;YAAAqB;UAAA,CAFA,EAGA;YAAArB;YAAAqB;UAAA,CAHA,EAIA;YAAArB;YAAAqB;UAAA,CAJA,EAKA;YAAArB;YAAAqB;UAAA,CALA,EAMA;YAAArB;YAAAqB;UAAA,CANA,EAOA;YAAArB;YAAAqB;UAAA,CAPA,EAQA;YAAArB;YAAAqB;UAAA,CARA;QArBA,CADA;QAiCAC,SACA;UACAC;YACAR;cACAS;YADA;UADA,CADA;UAMAC;YACAb;UADA,CANA;UASAZ,0BATA;UAUAI,aAVA;UAWAI,OACA;YACAkB,sBADA;YAEA1B,wBAFA;YAGAkB;cACAN,sBADA;cAEAe;YAFA;UAHA,CADA;QAXA,CADA;MAjCA;IADA;EA4DA,CA/EA;;EAgFAC;IACAC,cAEA;;EAHA,CAhFA;;EAqFAC;IACA;IAEA;IAEA;IACAC;MACA;MACA;MACAC;MACAA;IACA,CALA;EAMA;;AAjGA","names":["name","mixins","props","areaColor","type","default","lineColor","dataValue","data","networkingOptions","radar","axisName","color","fontSize","axisLine","lineStyle","splitLine","splitArea","areaStyle","shadowColor","indicator","max","series","emphasis","width","itemStyle","value","opacity","methods","onRendered","mounted","allText","text"],"sourceRoot":"src/components/universal/Charts","sources":["NetworkingChart.vue"],"sourcesContent":["<template>\n  <v-chart ref=\"networkingChart\" :option=\"networkingOptions\" :init-options=\"{renderer: 'svg' }\" @finished=\"onRendered\" />\n</template>\n\n<script>\nimport resizeChart from \"@/mixins/resizeChart\";\nexport default {\n  name: \"NetworkingChart\",\n  mixins: [ resizeChart ],\n  props: {\n    areaColor: {\n      type: String,\n      default: '#5B6270'\n    },\n    lineColor: {\n      type: String,\n      default: ''\n    },\n    dataValue: {\n      type: Array,\n      default: () => [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000]\n    }\n  },\n  data() {\n    const self = this\n    return {\n      networkingOptions: {\n        radar: {\n          axisName: {\n            color: \"#1B2230\",\n            fontSize: 10\n          },\n          axisLine: {\n            lineStyle: {\n              color: '#DBDDE4'\n            }\n          },\n          splitLine: {\n            lineStyle: {\n              color: '#DBDDE4'\n            }\n          },\n          splitArea: {\n            areaStyle: {\n              color: ['rgba(236,236,244,0.5)'],\n              shadowColor: 'rgba(0, 0, 0, 0.2)',\n            }\n          },\n          indicator: [\n            { name: 'Sentiment', max: 10000 },\n            { name: 'Market Dynamics', max: 10000 },\n            { name: 'Cash Mngmt', max: 10000 },\n            { name: 'Dividends', max: 10000 },\n            { name: 'Technicals', max: 10000 },\n            { name: 'Structure', max: 10000 },\n            { name: 'Valuation', max: 10000 },\n            { name: 'Operations', max: 10000 },\n          ]\n        },\n        series: [\n          {\n            emphasis: {\n              lineStyle: {\n                width: 4\n              }\n            },\n            itemStyle: {\n              color: self?.lineColor\n            },\n            name: 'Budget vs spending',\n            type: 'radar',\n            data: [\n              {\n                value: self?.dataValue,\n                name: 'Allocated Budget',\n                areaStyle: {\n                  color: self?.areaColor,\n                  opacity: '0.12'\n                }\n              }\n            ]\n          }\n        ]\n      }\n    }\n  },\n  methods: {\n    onRendered() {\n\n    }\n  },\n  mounted() {\n    this.resizeChart('networkingChart');\n\n    const allText = this.$refs.networkingChart.$el.querySelectorAll('svg text');\n\n    const deg = 360 / allText.length;\n    allText.forEach((text, index) => {\n      const degrees = deg * index > 90 && deg * index < 270 ? -(deg * index) - 180 : -(deg*index)\n      const attributeValue = `${text.getAttribute( 'transform')} rotate(${degrees})`;\n      text.setAttribute('transform', attributeValue)\n      text.setAttribute('text-anchor', 'middle');\n    })\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"//\n//\n//\n//\n//\n//\nimport * as echarts from 'echarts';\nexport default {\n  name: \"PriceChart\",\n  props: {\n    lineData: {\n      type: Array,\n      default: () => []\n    },\n    lineColor: {\n      type: String,\n      default: '#28A946'\n    },\n    stepLineData: {\n      type: Array,\n      default: () => []\n    },\n    stepLineColor: {\n      type: String,\n      default: '#0770FF'\n    }\n  },\n\n  data() {\n    const self = this;\n    return {\n      xAxisMarkerLineData: [],\n      xAxisData: [],\n      priceOptions: {\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        backgroundColor: 'rgba(250,250,252,0.5)',\n        xAxis: {\n          type: 'category',\n          data: [],\n          boundaryGap: false,\n          axisLabel: {\n            formatter: '{value}',\n            fontSize: 10\n          }\n        },\n        yAxis: {\n          type: 'value',\n          position: 'right',\n          axisLabel: {\n            fontSize: 10\n          }\n        },\n        series: [{\n          name: 'Fake Data',\n          type: 'line',\n          smooth: true,\n          symbol: 'circle',\n          symbolSize: 4,\n          sampling: 'average',\n          markLine: {\n            symbol: ['none', 'none'],\n            label: {\n              show: false\n            },\n            lineStyle: {\n              color: '#e1e1e1',\n              type: 'solid'\n            },\n            data: []\n          },\n          lineStyle: {\n            color: self?.lineColor\n          },\n          itemStyle: {\n            color: self?.stepLineColor\n          },\n          stack: 'a',\n          areaStyle: {\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: 'rgba(40, 180, 62, 0.25)'\n            }, {\n              offset: 1,\n              color: 'rgba(40, 180, 62, 0)'\n            }])\n          },\n          data: [120, 132, 101, 134, 90, 230, 210, 120, 132, 101, 134, 90, 230, 210, 120, 132, 101, 134, 90, 230, 210]\n        }, {\n          name: 'Step Start',\n          type: 'line',\n          step: 'start',\n          lineStyle: {\n            color: self?.stepLineColor\n          },\n          data: [60, 80, 50, 67, 45, 115, 100, 60, 80, 50, 67, 45, 115, 100, 60, 80, 50, 67, 45, 115, 100]\n        }]\n      }\n    };\n  },\n\n  methods: {\n    generateXAxisMarker() {\n      const arrayLength = this.priceOptions.series[0]?.data?.length;\n\n      if (arrayLength) {\n        for (let i = 0; i <= arrayLength; i++) {\n          this.xAxisMarkerLineData.push({\n            xAxis: i\n          });\n        }\n\n        const [firstSeriesElement] = this.priceOptions.series;\n        firstSeriesElement.markLine.data = this.xAxisMarkerLineData;\n      }\n    },\n\n    generateXAxisData() {\n      const arrayLength = this.priceOptions.series[0]?.data?.length;\n\n      if (arrayLength) {\n        const currentMonth = new Date().getMonth() + 1;\n        const dateOptions = {\n          month: 'long',\n          day: 'numeric'\n        };\n\n        for (let i = 1; i <= arrayLength; i++) {\n          const date = new Date(`2022-${currentMonth}-${i}`).toLocaleDateString(\"en-US\", dateOptions);\n          this.xAxisData.push(date);\n        }\n\n        this.priceOptions.xAxis.data = this.xAxisData;\n      }\n    }\n\n  },\n\n  mounted() {\n    this.generateXAxisMarker();\n    this.generateXAxisData();\n  }\n\n};","map":{"version":3,"mappings":";;;;;;AAOA;AACA;EACAA,kBADA;EAEAC;IACAC;MACAC,WADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAC;IAFA,CALA;IASAE;MACAH,WADA;MAEAC;IAFA,CATA;IAaAG;MACAJ,YADA;MAEAC;IAFA;EAbA,CAFA;;EAoBAI;IACA;IACA;MACAC,uBADA;MAEAC,aAFA;MAGAC;QACAC;UACAC;QADA,CADA;QAIAC;UACAC,UADA;UAEAC,WAFA;UAGAC,YAHA;UAIAC;QAJA,CAJA;QAUAC,wCAVA;QAWAC;UACAjB,gBADA;UAEAK,QAFA;UAGAa,kBAHA;UAIAC;YACAC,oBADA;YAEAC;UAFA;QAJA,CAXA;QAoBAC;UACAtB,aADA;UAEAuB,iBAFA;UAGAJ;YACAE;UADA;QAHA,CApBA;QA2BAG,SACA;UACA3B,iBADA;UAEAG,YAFA;UAGAyB,YAHA;UAIAC,gBAJA;UAKAC,aALA;UAMAC,mBANA;UAOAC;YACAH,wBADA;YAEAI;cAAAC;YAAA,CAFA;YAGAC;cACAC,gBADA;cAEAjC;YAFA,CAHA;YAOAK;UAPA,CAPA;UAgBA2B;YACAC;UADA,CAhBA;UAmBAC;YACAD;UADA,CAnBA;UAsBAE,UAtBA;UAuBAC;YACAH,uDACA;cACAI,SADA;cAEAJ;YAFA,CADA,EAKA;cACAI,SADA;cAEAJ;YAFA,CALA;UADA,CAvBA;UAmCA5B;QAnCA,CADA,EAsCA;UACAR,kBADA;UAEAG,YAFA;UAGAsC,aAHA;UAIAN;YACAC;UADA,CAJA;UAOA5B;QAPA,CAtCA;MA3BA;IAHA;EAiFA,CAvGA;;EAwGAkC;IACAC;MACA;;MACA;QACA;UACA;YACAvB;UADA;QAGA;;QACA;QACAwB;MACA;IACA,CAZA;;IAaAC;MACA;;MACA;QACA;QACA;UAAAC;UAAAC;QAAA;;QAEA;UACA;UACA;QACA;;QAEA;MACA;IACA;;EA1BA,CAxGA;;EAoIAC;IACA;IACA;EACA;;AAvIA","names":["name","props","lineData","type","default","lineColor","stepLineData","stepLineColor","data","xAxisMarkerLineData","xAxisData","priceOptions","tooltip","trigger","grid","left","right","bottom","containLabel","backgroundColor","xAxis","boundaryGap","axisLabel","formatter","fontSize","yAxis","position","series","smooth","symbol","symbolSize","sampling","markLine","label","show","lineStyle","color","itemStyle","stack","areaStyle","offset","step","methods","generateXAxisMarker","firstSeriesElement","generateXAxisData","month","day","mounted"],"sourceRoot":"src/components/universal/Charts","sources":["PriceChart.vue"],"sourcesContent":["<template>\n  <div>\n    <v-chart class=\"chart h-[26.25rem]\" :option=\"priceOptions\"/>\n  </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\nexport default {\n  name: \"PriceChart\",\n  props: {\n    lineData: {\n      type: Array,\n      default : () => []\n    },\n    lineColor: {\n      type: String,\n      default: '#28A946'\n    },\n    stepLineData: {\n      type: Array,\n      default : () => []\n    },\n    stepLineColor: {\n      type: String,\n      default: '#0770FF'\n    },\n  },\n  data() {\n    const self = this\n    return {\n        xAxisMarkerLineData: [],\n        xAxisData: [],\n        priceOptions: {\n          tooltip: {\n            trigger: 'axis'\n          },\n          grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true,\n          },\n          backgroundColor: 'rgba(250,250,252,0.5)',\n          xAxis: {\n            type: 'category',\n            data: [],\n            boundaryGap: false,\n            axisLabel: {\n              formatter: '{value}',\n              fontSize: 10\n            }\n          },\n          yAxis: {\n            type: 'value',\n            position: 'right',\n            axisLabel: {\n              fontSize: 10\n            }\n          },\n          series: [\n            {\n              name: 'Fake Data',\n              type: 'line',\n              smooth: true,\n              symbol: 'circle',\n              symbolSize: 4,\n              sampling: 'average',\n              markLine: {\n                symbol: ['none', 'none'],\n                label: {show: false},\n                lineStyle: {\n                  color: '#e1e1e1',\n                  type: 'solid',\n                },\n                data: []\n              },\n              lineStyle: {\n                color: self?.lineColor\n              },\n              itemStyle: {\n                color: self?.stepLineColor\n              },\n              stack: 'a',\n              areaStyle: {\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                  {\n                    offset: 0,\n                    color: 'rgba(40, 180, 62, 0.25)'\n                  },\n                  {\n                    offset: 1,\n                    color: 'rgba(40, 180, 62, 0)'\n                  }\n                ])\n              },\n              data: [120, 132, 101, 134, 90, 230, 210, 120, 132, 101, 134, 90, 230, 210, 120, 132, 101, 134, 90, 230, 210],\n            },\n            {\n              name: 'Step Start',\n              type: 'line',\n              step: 'start',\n              lineStyle: {\n                color: self?.stepLineColor\n              },\n              data: [60, 80, 50, 67, 45, 115, 100, 60, 80, 50, 67, 45, 115, 100, 60, 80, 50, 67, 45, 115, 100]\n            }\n          ]\n        }\n\n    }\n  },\n  methods: {\n    generateXAxisMarker () {\n      const arrayLength = this.priceOptions.series[0]?.data?.length\n      if(arrayLength) {\n        for (let i = 0; i <= arrayLength; i++) {\n          this.xAxisMarkerLineData.push({\n            xAxis: i\n          })\n        }\n        const [firstSeriesElement] = this.priceOptions.series\n        firstSeriesElement.markLine.data = this.xAxisMarkerLineData\n      }\n    },\n    generateXAxisData () {\n      const arrayLength = this.priceOptions.series[0]?.data?.length\n      if(arrayLength) {\n        const currentMonth = new Date().getMonth() + 1\n        const dateOptions = { month: 'long', day: 'numeric' }\n\n        for (let i = 1; i <= arrayLength; i++) {\n          const date = new Date(`2022-${currentMonth}-${i}`).toLocaleDateString(\"en-US\", dateOptions)\n          this.xAxisData.push(date)\n        }\n\n        this.priceOptions.xAxis.data = this.xAxisData\n      }\n    }\n  },\n  mounted() {\n    this.generateXAxisMarker()\n    this.generateXAxisData()\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}
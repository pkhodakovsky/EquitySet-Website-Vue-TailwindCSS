{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport resizeChart from \"@/mixins/resizeChart\";\nimport * as echarts from 'echarts';\nimport ThreeCircleDropBtn from \"@/components/universal/ThreeCircleDropBtn\";\nimport SwitchTimePeriod from \"@/components/universal/SwitchTimePeriod\";\nimport SwitchCheckBox from \"@/components/universal/SwitchCheckBox\";\nexport default {\n  name: \"PriceChart\",\n  mixins: [resizeChart],\n  components: {\n    SwitchCheckBox,\n    SwitchTimePeriod,\n    ThreeCircleDropBtn\n  },\n  props: {\n    lineData: {\n      type: Array,\n      default: () => []\n    },\n    lineColor: {\n      type: String,\n      default: '#28A946'\n    },\n    stepLineData: {\n      type: Array,\n      default: () => []\n    },\n    stepLineColor: {\n      type: String,\n      default: '#0770FF'\n    }\n  },\n\n  data() {\n    const self = this;\n    return {\n      xAxisMarkerLineData: [],\n      xAxisData: [],\n      priceOptions: {\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        backgroundColor: 'rgba(250,250,252,0.5)',\n        xAxis: {\n          type: 'category',\n          data: [],\n          boundaryGap: false,\n          axisLabel: {\n            formatter: '{value}',\n            fontSize: 10\n          }\n        },\n        yAxis: {\n          max: 300,\n          type: 'value',\n          position: 'right',\n          axisLabel: {\n            fontSize: 10\n          }\n        },\n        series: [{\n          name: 'Fake Data',\n          type: 'line',\n          smooth: true,\n          symbol: 'none',\n          symbolSize: 4,\n          sampling: 'average',\n          markLine: {\n            symbol: ['none', 'none'],\n            label: {\n              show: false\n            },\n            lineStyle: {\n              color: '#e1e1e1',\n              type: 'solid'\n            },\n            data: []\n          },\n          lineStyle: {\n            color: self?.lineColor\n          },\n          itemStyle: {\n            color: self?.stepLineColor\n          },\n          stack: 'a',\n          areaStyle: {\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: 'rgba(40, 180, 62, 0.25)'\n            }, {\n              offset: 1,\n              color: 'rgba(40, 180, 62, 0)'\n            }])\n          },\n          data: [70, 90, 70, 97, 35, 145, 120, 50, 90, 60, 57, 55, 125, 110, 70, 60, 70, 77, 65, 105, 110]\n        }, {\n          name: 'Step Start',\n          type: 'line',\n          step: 'start',\n          symbol: 'none',\n          lineStyle: {\n            color: self?.stepLineColor\n          },\n          data: [80, 80, 50, 67, 45, 115, 100, 60, 80, 50, 67, 45, 115, 100, 60, 80, 50, 67, 45, 115, 100]\n        }]\n      }\n    };\n  },\n\n  methods: {\n    generateXAxisMarker() {\n      const arrayLength = this.priceOptions.series[0]?.data?.length;\n\n      if (arrayLength) {\n        for (let i = 0; i <= arrayLength; i++) {\n          this.xAxisMarkerLineData.push({\n            xAxis: i\n          });\n        }\n\n        const [firstSeriesElement] = this.priceOptions.series;\n        firstSeriesElement.markLine.data = this.xAxisMarkerLineData;\n      }\n    },\n\n    generateXAxisData() {\n      const arrayLength = this.priceOptions.series[0]?.data?.length;\n\n      if (arrayLength) {\n        const currentMonth = new Date().getMonth() + 1;\n        const dateOptions = {\n          month: 'long',\n          day: 'numeric'\n        };\n\n        for (let i = 1; i <= arrayLength; i++) {\n          const date = new Date(`2022-${currentMonth}-${i}`).toLocaleDateString(\"en-US\", dateOptions);\n          this.xAxisData.push(date);\n        }\n\n        this.priceOptions.xAxis.data = this.xAxisData;\n      }\n    }\n\n  },\n\n  mounted() {\n    this.setRefElement('priceChart');\n    this.generateXAxisMarker();\n    this.generateXAxisData();\n  }\n\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;AACA;AACA;AACA;AACA;EACAA,kBADA;EAEAC,qBAFA;EAGAC;IAAAC;IAAAC;IAAAC;EAAA,CAHA;EAIAC;IACAC;MACAC,WADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAC;IAFA,CALA;IASAE;MACAH,WADA;MAEAC;IAFA,CATA;IAaAG;MACAJ,YADA;MAEAC;IAFA;EAbA,CAJA;;EAsBAI;IACA;IACA;MACAC,uBADA;MAEAC,aAFA;MAGAC;QACAC;UACAC;QADA,CADA;QAIAC;UACAC,UADA;UAEAC,WAFA;UAGAC,YAHA;UAIAC;QAJA,CAJA;QAUAC,wCAVA;QAWAC;UACAjB,gBADA;UAEAK,QAFA;UAGAa,kBAHA;UAIAC;YACAC,oBADA;YAEAC;UAFA;QAJA,CAXA;QAoBAC;UACAC,QADA;UAEAvB,aAFA;UAGAwB,iBAHA;UAIAL;YACAE;UADA;QAJA,CApBA;QA4BAI,SACA;UACAjC,iBADA;UAEAQ,YAFA;UAGA0B,YAHA;UAIAC,cAJA;UAKAC,aALA;UAMAC,mBANA;UAOAC;YACAH,wBADA;YAEAI;cAAAC;YAAA,CAFA;YAGAC;cACAC,gBADA;cAEAlC;YAFA,CAHA;YAOAK;UAPA,CAPA;UAgBA4B;YACAC;UADA,CAhBA;UAmBAC;YACAD;UADA,CAnBA;UAsBAE,UAtBA;UAuBAC;YACAH,uDACA;cACAI,SADA;cAEAJ;YAFA,CADA,EAKA;cACAI,SADA;cAEAJ;YAFA,CALA;UADA,CAvBA;UAmCA7B;QAnCA,CADA,EAsCA;UACAb,kBADA;UAEAQ,YAFA;UAGAuC,aAHA;UAIAZ,cAJA;UAKAM;YACAC;UADA,CALA;UAQA7B;QARA,CAtCA;MA5BA;IAHA;EAkFA,CA1GA;;EA2GAmC;IACAC;MACA;;MACA;QACA;UACA;YACAxB;UADA;QAGA;;QACA;QACAyB;MACA;IACA,CAZA;;IAaAC;MACA;;MACA;QACA;QACA;UAAAC;UAAAC;QAAA;;QAEA;UACA;UACA;QACA;;QAEA;MACA;IACA;;EA1BA,CA3GA;;EAuIAC;IACA;IACA;IACA;EACA;;AA3IA","names":["name","mixins","components","SwitchCheckBox","SwitchTimePeriod","ThreeCircleDropBtn","props","lineData","type","default","lineColor","stepLineData","stepLineColor","data","xAxisMarkerLineData","xAxisData","priceOptions","tooltip","trigger","grid","left","right","bottom","containLabel","backgroundColor","xAxis","boundaryGap","axisLabel","formatter","fontSize","yAxis","max","position","series","smooth","symbol","symbolSize","sampling","markLine","label","show","lineStyle","color","itemStyle","stack","areaStyle","offset","step","methods","generateXAxisMarker","firstSeriesElement","generateXAxisData","month","day","mounted"],"sourceRoot":"src/components/universal/Charts","sources":["PriceChart.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"flex items-center justify-between\">\n      <div class=\"mb-6 flex items-center\">\n        <SwitchTimePeriod />\n\n        <div class=\"text-xs leading-4 flex items-center\">\n          <div class=\"ml-2\">\n            <span class=\"text-secondary-text\">Open:</span>\n            <span class=\"ml-[3px] text-footer-nav\">$292.92</span>\n          </div>\n\n          <div class=\"ml-3\">\n            <span class=\"text-secondary-text\">Close:</span>\n            <span class=\"ml-[3px] text-footer-nav\">$292.92</span>\n          </div>\n\n          <div class=\"ml-3\">\n            <span class=\"text-secondary-text\">Diff.:</span>\n            <span class=\"ml-[3px] text-japanese-laurel\">%2.10</span>\n          </div>\n        </div>\n      </div>\n\n      <ThreeCircleDropBtn />\n    </div>\n\n    <v-chart class=\"chart h-[26.25rem]\" :option=\"priceOptions\"/>\n\n    <div class=\"mt-3 flex items-center\">\n      <button class=\"flex items-center py-1 px-1.5 border border-athens-gray rounded-[2px]\">\n        <div class=\"h-2 w-2 rounded-full mr-1.5 bg-dark-blue\"></div>\n        <div class=\"text-dark-blue text-[10px] leading-3\">Fair Value</div>\n      </button>\n\n      <div class=\"h-4 w-[1px] bg-profile-icon mx-2\"></div>\n\n      <div class=\"flex items-center\">\n        <div class=\"text-[10px] leading-4 text-grey mr-2\">Rating Changes</div>\n\n        <SwitchCheckBox />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport resizeChart from \"@/mixins/resizeChart\";\nimport * as echarts from 'echarts';\nimport ThreeCircleDropBtn from \"@/components/universal/ThreeCircleDropBtn\";\nimport SwitchTimePeriod from \"@/components/universal/SwitchTimePeriod\";\nimport SwitchCheckBox from \"@/components/universal/SwitchCheckBox\";\nexport default {\n  name: \"PriceChart\",\n  mixins: [ resizeChart ],\n  components: {SwitchCheckBox, SwitchTimePeriod, ThreeCircleDropBtn},\n  props: {\n    lineData: {\n      type: Array,\n      default : () => []\n    },\n    lineColor: {\n      type: String,\n      default: '#28A946'\n    },\n    stepLineData: {\n      type: Array,\n      default : () => []\n    },\n    stepLineColor: {\n      type: String,\n      default: '#0770FF'\n    },\n  },\n  data() {\n    const self = this\n    return {\n        xAxisMarkerLineData: [],\n        xAxisData: [],\n        priceOptions: {\n          tooltip: {\n            trigger: 'axis'\n          },\n          grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true,\n          },\n          backgroundColor: 'rgba(250,250,252,0.5)',\n          xAxis: {\n            type: 'category',\n            data: [],\n            boundaryGap: false,\n            axisLabel: {\n              formatter: '{value}',\n              fontSize: 10\n            }\n          },\n          yAxis: {\n            max: 300,\n            type: 'value',\n            position: 'right',\n            axisLabel: {\n              fontSize: 10\n            }\n          },\n          series: [\n            {\n              name: 'Fake Data',\n              type: 'line',\n              smooth: true,\n              symbol: 'none',\n              symbolSize: 4,\n              sampling: 'average',\n              markLine: {\n                symbol: ['none', 'none'],\n                label: {show: false},\n                lineStyle: {\n                  color: '#e1e1e1',\n                  type: 'solid',\n                },\n                data: []\n              },\n              lineStyle: {\n                color: self?.lineColor\n              },\n              itemStyle: {\n                color: self?.stepLineColor\n              },\n              stack: 'a',\n              areaStyle: {\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                  {\n                    offset: 0,\n                    color: 'rgba(40, 180, 62, 0.25)'\n                  },\n                  {\n                    offset: 1,\n                    color: 'rgba(40, 180, 62, 0)'\n                  }\n                ])\n              },\n              data: [70, 90, 70, 97, 35, 145, 120, 50, 90, 60, 57, 55, 125, 110, 70, 60, 70, 77, 65, 105, 110],\n            },\n            {\n              name: 'Step Start',\n              type: 'line',\n              step: 'start',\n              symbol: 'none',\n              lineStyle: {\n                color: self?.stepLineColor\n              },\n              data: [80, 80, 50, 67, 45, 115, 100, 60, 80, 50, 67, 45, 115, 100, 60, 80, 50, 67, 45, 115, 100]\n            }\n          ]\n        }\n    }\n  },\n  methods: {\n    generateXAxisMarker () {\n      const arrayLength = this.priceOptions.series[0]?.data?.length\n      if(arrayLength) {\n        for (let i = 0; i <= arrayLength; i++) {\n          this.xAxisMarkerLineData.push({\n            xAxis: i\n          })\n        }\n        const [firstSeriesElement] = this.priceOptions.series\n        firstSeriesElement.markLine.data = this.xAxisMarkerLineData\n      }\n    },\n    generateXAxisData () {\n      const arrayLength = this.priceOptions.series[0]?.data?.length\n      if(arrayLength) {\n        const currentMonth = new Date().getMonth() + 1\n        const dateOptions = { month: 'long', day: 'numeric' }\n\n        for (let i = 1; i <= arrayLength; i++) {\n          const date = new Date(`2022-${currentMonth}-${i}`).toLocaleDateString(\"en-US\", dateOptions)\n          this.xAxisData.push(date)\n        }\n\n        this.priceOptions.xAxis.data = this.xAxisData\n      }\n    }\n  },\n  mounted() {\n    this.setRefElement('priceChart')\n    this.generateXAxisMarker()\n    this.generateXAxisData()\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}
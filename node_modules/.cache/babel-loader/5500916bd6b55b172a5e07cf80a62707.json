{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\nimport resizeChart from \"@/mixins/resizeChart\";\nimport * as echarts from 'echarts';\nimport PriceChartWrapper from \"@/components/universal/Charts/PriceChartWrapper\";\nconst BOTTOM_COLOR_GREEN = '#28A946';\nconst BOTTOM_COLOR_RED = '#FF342A';\n\nconst createBottomLine = (startX, endX, color, hasMarkArea) => {\n  const markAreaOptions = {\n    itemStyle: {\n      color: color,\n      opacity: 0.15\n    },\n    data: [[{\n      xAxis: startX\n    }, {\n      xAxis: endX\n    }]]\n  };\n  return {\n    type: 'line',\n    symbol: 'none',\n    color,\n    data: [[startX, 0], [endX, 0]],\n    markArea: hasMarkArea ? markAreaOptions : null\n  };\n};\n\nconst priceChartSeries = (self, hasMarkArea = false) => {\n  return [{\n    name: 'Fake Data',\n    type: 'line',\n    smooth: true,\n    symbol: 'none',\n    symbolSize: 4,\n    sampling: 'average',\n    markLine: {\n      symbol: ['none', 'none'],\n      label: {\n        show: false\n      },\n      lineStyle: {\n        color: '#e1e1e1',\n        type: 'solid'\n      },\n      data: []\n    },\n    lineStyle: {\n      color: self?.lineColor\n    },\n    itemStyle: {\n      color: self?.stepLineColor\n    },\n    stack: 'a',\n    areaStyle: {\n      color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n        offset: 0,\n        color: 'rgba(40, 180, 62, 0.25)'\n      }, {\n        offset: 1,\n        color: 'rgba(40, 180, 62, 0)'\n      }])\n    },\n    data: self?.stepLineData?.map(item => Math.ceil(Math.random() * 40))\n  }, {\n    name: 'Step Start',\n    type: 'line',\n    step: 'start',\n    symbol: 'none',\n    lineStyle: {\n      color: self?.stepLineColor\n    },\n    data: self?.stepLineData\n  }, createBottomLine(0, 2, BOTTOM_COLOR_RED, hasMarkArea), createBottomLine(2, 5, BOTTOM_COLOR_GREEN, hasMarkArea), createBottomLine(5, 10, BOTTOM_COLOR_RED, hasMarkArea), createBottomLine(10, 13, BOTTOM_COLOR_GREEN, hasMarkArea), createBottomLine(13, 19, BOTTOM_COLOR_RED, hasMarkArea), createBottomLine(19, 20, BOTTOM_COLOR_GREEN, hasMarkArea)];\n};\n\nexport default {\n  name: \"PriceChart\",\n  components: {\n    PriceChartWrapper\n  },\n  mixins: [resizeChart],\n  props: {\n    lineData: {\n      type: Array,\n      default: () => []\n    },\n    lineColor: {\n      type: String,\n      default: '#28A946'\n    },\n    // stepLineData: {\n    //   type: Array,\n    //   default : () => []\n    // },\n    stepLineColor: {\n      type: String,\n      default: '#0770FF'\n    }\n  },\n\n  data() {\n    const self = this;\n    return {\n      xAxisMarkerLineData: [],\n      xAxisData: [],\n      priceOptions: {\n        renderMode: \"svg\",\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid: {\n          show: true,\n          left: '1%',\n          right: '1%',\n          bottom: '3%',\n          top: '2%',\n          containLabel: true,\n          backgroundColor: 'rgba(250,250,252,0.5)'\n        },\n        xAxis: {\n          type: 'category',\n          data: [],\n          boundaryGap: false,\n          axisLabel: {\n            formatter: params => {\n              return new Date(params).toLocaleDateString('en-us', {\n                month: \"short\",\n                day: \"numeric\"\n              });\n            },\n            fontSize: 10,\n            align: 'center'\n          }\n        },\n        yAxis: {\n          max: 300,\n          type: 'value',\n          position: 'right',\n          axisLabel: {\n            fontSize: 10\n          }\n        },\n        series: priceChartSeries(self)\n      },\n      stepLineData: []\n    };\n  },\n\n  methods: {\n    onToggleCheckbox(value) {\n      this.priceOptions.series = priceChartSeries(this, value);\n    },\n\n    generateXAxisMarker() {\n      const arrayLength = this.priceOptions.series[0]?.data?.length;\n\n      if (arrayLength) {\n        for (let i = 0; i <= arrayLength; i++) {\n          this.xAxisMarkerLineData.push({\n            xAxis: i\n          });\n        }\n\n        const [firstSeriesElement] = this.priceOptions.series;\n        firstSeriesElement.markLine.data = this.xAxisMarkerLineData;\n      }\n    },\n\n    generateXAxisData(dates) {\n      const arrayLength = this.priceOptions.series[0]?.data?.length;\n      const dateOptions = {\n        month: 'long',\n        day: 'numeric'\n      };\n\n      if (dates && dates.length) {\n        this.xAxisData = [];\n        dates.forEach(item => {\n          const date = new Date(item).toLocaleDateString('en-US', dateOptions);\n          this.xAxisData.push(date);\n        });\n        this.priceOptions.xAxis.data = this.xAxisData;\n      } else if (arrayLength) {\n        const currentMonth = new Date().getMonth() + 1;\n\n        for (let i = 1; i <= arrayLength; i++) {\n          const date = new Date(`2022-${currentMonth}-${i}`).toLocaleDateString(\"en-US\", dateOptions);\n          this.xAxisData.push(date);\n        }\n\n        this.priceOptions.xAxis.data = this.xAxisData;\n      }\n    },\n\n    setStepLineData(data) {\n      this.stepLineData = data.map(item => item.open);\n      this.priceOptions.series = priceChartSeries(this);\n      this.generateXAxisData(data.map(item => item.date));\n    }\n\n  },\n\n  mounted() {\n    this.setRefElement('priceChart');\n    this.generateXAxisMarker();\n    this.generateXAxisData();\n  }\n\n};","map":{"version":3,"mappings":";;;;;;;AAQA;AACA;AACA;AAEA;AACA;;AAEA;EACA;IACAA;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC,OACA;MAAAC;IAAA;MAAAA;IAAA,EADA;EALA;EASA;IACAC,YADA;IAEAC,cAFA;IAGAL,KAHA;IAIAE,8BAJA;IAKAI;EALA;AAOA,CAjBA;;AAmBA;EACA,QACA;IACAC,iBADA;IAEAH,YAFA;IAGAI,YAHA;IAIAH,cAJA;IAKAI,aALA;IAMAC,mBANA;IAOAC;MACAN,wBADA;MAEAO;QAAAC;MAAA,CAFA;MAGAC;QACAd,gBADA;QAEAI;MAFA,CAHA;MAOAF;IAPA,CAPA;IAgBAY;MACAd;IADA,CAhBA;IAmBAD;MACAC;IADA,CAnBA;IAsBAe,UAtBA;IAuBAC;MACAhB,uDACA;QACAiB,SADA;QAEAjB;MAFA,CADA,EAKA;QACAiB,SADA;QAEAjB;MAFA,CALA;IADA,CAvBA;IAmCAE;EAnCA,CADA,EAsCA;IACAK,kBADA;IAEAH,YAFA;IAGAc,aAHA;IAIAb,cAJA;IAKAS;MACAd;IADA,CALA;IAQAE;EARA,CAtCA,EAgDAiB,qDAhDA,EAiDAA,uDAjDA,EAkDAA,sDAlDA,EAmDAA,yDAnDA,EAoDAA,uDApDA,EAqDAA,yDArDA;AAuDA,CAxDA;;AA0DA;EACAZ,kBADA;EAEAa;IAAAC;EAAA,CAFA;EAGAC,qBAHA;EAKAC;IACAC;MACApB,WADA;MAEAqB;IAFA,CADA;IAKAC;MACAtB,YADA;MAEAqB;IAFA,CALA;IASA;IACA;IACA;IACA;IACAE;MACAvB,YADA;MAEAqB;IAFA;EAbA,CALA;;EAuBAvB;IACA;IACA;MACA0B,uBADA;MAEAC,aAFA;MAGAC;QACAC,iBADA;QAEAC;UACAC;QADA,CAFA;QAKAC;UACArB,UADA;UAEAsB,UAFA;UAGAC,WAHA;UAIAC,YAJA;UAKAC,SALA;UAMAC,kBANA;UAOAC;QAPA,CALA;QAcArC;UACAC,gBADA;UAEAF,QAFA;UAGAuC,kBAHA;UAIAC;YACAC;cACA;gBAAAC;gBAAAC;cAAA;YACA,CAHA;YAIAC,YAJA;YAKAC;UALA;QAJA,CAdA;QA0BAC;UACAC,QADA;UAEA7C,aAFA;UAGA8C,iBAHA;UAIAR;YACAI;UADA;QAJA,CA1BA;QAkCAK;MAlCA,CAHA;MAuCAC;IAvCA;EAyCA,CAlEA;;EAmEAC;IACAC;MACA;IACA,CAHA;;IAIAC;MACA;;MACA;QACA;UACA;YACApD;UADA;QAGA;;QACA;QACAqD;MACA;IACA,CAfA;;IAgBAC;MACA;MACA;QAAAb;QAAAC;MAAA;;MAEA;QACA;QACAa;UACA;UACA;QACA,CAHA;QAKA;MACA,CARA,MAQA;QACA;;QAEA;UACA;UACA;QACA;;QAEA;MACA;IACA,CAtCA;;IAuCAC;MACA;MACA;MACA;IACA;;EA3CA,CAnEA;;EAgHAC;IACA;IACA;IACA;EACA;;AApHA","names":["itemStyle","color","opacity","data","xAxis","type","symbol","markArea","name","smooth","symbolSize","sampling","markLine","label","show","lineStyle","stack","areaStyle","offset","step","createBottomLine","components","PriceChartWrapper","mixins","props","lineData","default","lineColor","stepLineColor","xAxisMarkerLineData","xAxisData","priceOptions","renderMode","tooltip","trigger","grid","left","right","bottom","top","containLabel","backgroundColor","boundaryGap","axisLabel","formatter","month","day","fontSize","align","yAxis","max","position","series","stepLineData","methods","onToggleCheckbox","generateXAxisMarker","firstSeriesElement","generateXAxisData","dates","setStepLineData","mounted"],"sourceRoot":"src/components/universal/Charts","sources":["PriceChart.vue"],"sourcesContent":["<template>\n  <PriceChartWrapper class=\"relative\" @toggle-checkbox=\"onToggleCheckbox\" @stepLineData=\"setStepLineData\">\n    <img class=\"absolute z-50 left-6 top-24 lg:top-[4.4rem]\" :src=\"require('@/assets/img/logos/logo-chart.svg')\" alt=\"logo\"/>\n    <v-chart ref=\"priceChart\" class=\"h-[15rem] md:h-[26.25rem]\" :option=\"priceOptions\"/>\n  </PriceChartWrapper>\n</template>\n\n<script>\nimport resizeChart from \"@/mixins/resizeChart\";\nimport * as echarts from 'echarts';\nimport PriceChartWrapper from \"@/components/universal/Charts/PriceChartWrapper\";\n\nconst BOTTOM_COLOR_GREEN = '#28A946'\nconst BOTTOM_COLOR_RED = '#FF342A'\n\nconst createBottomLine = (startX, endX, color, hasMarkArea) => {\n  const markAreaOptions = {\n    itemStyle: {\n      color: color,\n      opacity: 0.15\n    },\n    data: [\n      [ { xAxis: startX }, { xAxis: endX } ]\n    ]\n  }\n  return {\n    type: 'line',\n    symbol: 'none',\n    color,\n    data: [[startX, 0], [endX, 0]],\n    markArea: hasMarkArea ? markAreaOptions : null\n  }\n}\n\nconst priceChartSeries = (self, hasMarkArea = false) => {\n  return [\n    {\n      name: 'Fake Data',\n      type: 'line',\n      smooth: true,\n      symbol: 'none',\n      symbolSize: 4,\n      sampling: 'average',\n      markLine: {\n        symbol: ['none', 'none'],\n        label: {show: false},\n        lineStyle: {\n          color: '#e1e1e1',\n          type: 'solid',\n        },\n        data: []\n      },\n      lineStyle: {\n        color: self?.lineColor\n      },\n      itemStyle: {\n        color: self?.stepLineColor\n      },\n      stack: 'a',\n      areaStyle: {\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: 'rgba(40, 180, 62, 0.25)'\n          },\n          {\n            offset: 1,\n            color: 'rgba(40, 180, 62, 0)'\n          }\n        ])\n      },\n      data: self?.stepLineData?.map(item => Math.ceil(Math.random() * 40)),\n    },\n    {\n      name: 'Step Start',\n      type: 'line',\n      step: 'start',\n      symbol: 'none',\n      lineStyle: {\n        color: self?.stepLineColor\n      },\n      data: self?.stepLineData\n    },\n    createBottomLine(0, 2, BOTTOM_COLOR_RED, hasMarkArea),\n    createBottomLine(2, 5, BOTTOM_COLOR_GREEN, hasMarkArea),\n    createBottomLine(5, 10, BOTTOM_COLOR_RED, hasMarkArea),\n    createBottomLine(10, 13, BOTTOM_COLOR_GREEN, hasMarkArea),\n    createBottomLine(13, 19, BOTTOM_COLOR_RED, hasMarkArea),\n    createBottomLine(19, 20, BOTTOM_COLOR_GREEN, hasMarkArea),\n  ]\n}\n\nexport default {\n  name: \"PriceChart\",\n  components: { PriceChartWrapper },\n  mixins: [ resizeChart ],\n\n  props: {\n    lineData: {\n      type: Array,\n      default : () => []\n    },\n    lineColor: {\n      type: String,\n      default: '#28A946'\n    },\n    // stepLineData: {\n    //   type: Array,\n    //   default : () => []\n    // },\n    stepLineColor: {\n      type: String,\n      default: '#0770FF'\n    },\n  },\n  data() {\n    const self = this\n    return {\n        xAxisMarkerLineData: [],\n        xAxisData: [],\n        priceOptions: {\n          renderMode: \"svg\",\n          tooltip: {\n            trigger: 'axis'\n          },\n          grid: {\n            show: true,\n            left: '1%',\n            right: '1%',\n            bottom: '3%',\n            top: '2%',\n            containLabel: true,\n            backgroundColor: 'rgba(250,250,252,0.5)',\n          },\n          xAxis: {\n            type: 'category',\n            data: [],\n            boundaryGap: false,\n            axisLabel: {\n              formatter: params => {\n                return new Date(params).toLocaleDateString('en-us', { month:\"short\", day:\"numeric\"})\n              },\n              fontSize: 10,\n              align: 'center'\n            }\n          },\n          yAxis: {\n            max: 300,\n            type: 'value',\n            position: 'right',\n            axisLabel: {\n              fontSize: 10\n            }\n          },\n          series: priceChartSeries(self)\n        },\n        stepLineData: [],\n    }\n  },\n  methods: {\n    onToggleCheckbox(value) {\n      this.priceOptions.series = priceChartSeries(this, value)\n    },\n    generateXAxisMarker () {\n      const arrayLength = this.priceOptions.series[0]?.data?.length\n      if(arrayLength) {\n        for (let i = 0; i <= arrayLength; i++) {\n          this.xAxisMarkerLineData.push({\n            xAxis: i\n          })\n        }\n        const [firstSeriesElement] = this.priceOptions.series\n        firstSeriesElement.markLine.data = this.xAxisMarkerLineData\n      }\n    },\n    generateXAxisData (dates) {\n      const arrayLength = this.priceOptions.series[0]?.data?.length\n      const dateOptions = { month: 'long', day: 'numeric' }\n\n      if (dates && dates.length) {\n        this.xAxisData = []\n        dates.forEach(item => {\n          const date = new Date(item).toLocaleDateString('en-US', dateOptions)\n          this.xAxisData.push(date)\n        })\n\n        this.priceOptions.xAxis.data = this.xAxisData\n      } else if (arrayLength) {\n        const currentMonth = new Date().getMonth() + 1\n\n        for (let i = 1; i <= arrayLength; i++) {\n          const date = new Date(`2022-${currentMonth}-${i}`).toLocaleDateString(\"en-US\", dateOptions)\n          this.xAxisData.push(date)\n        }\n\n        this.priceOptions.xAxis.data = this.xAxisData\n      }\n    },\n    setStepLineData(data) {\n      this.stepLineData = data.map(item => item.open)\n      this.priceOptions.series = priceChartSeries(this)\n      this.generateXAxisData(data.map(item => item.date))\n    }\n  },\n  mounted() {\n    this.setRefElement('priceChart')\n    this.generateXAxisMarker()\n    this.generateXAxisData()\n  },\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\n//\n//\n//\n//\n//\n//\nimport * as echarts from 'echarts';\nimport resizeChart from \"@/mixins/resizeChart\";\nexport default {\n  name: \"LineChart\",\n  mixins: [resizeChart],\n  props: {\n    lineColor: {\n      type: String,\n      default: '#3B82F6'\n    },\n    lineData: {\n      type: Array,\n      default: () => []\n    },\n    showYAxis: {\n      type: Boolean,\n      default: true\n    },\n    top: {\n      type: [String, Number],\n      default: '2%'\n    },\n    bottom: {\n      type: [String, Number],\n      default: '0%'\n    }\n  },\n\n  data() {\n    const self = this;\n    return {\n      lineOptions: {\n        grid: {\n          left: '0',\n          right: '0',\n          bottom: self.bottom,\n          top: self.top,\n          containLabel: self.showYAxis\n        },\n        tooltip: {\n          position: cord => [cord[0] - 70, 0],\n          trigger: 'axis',\n          axisPointer: {\n            type: 'line',\n            lineStyle: {\n              color: self.lineColor\n            }\n          },\n          formatter: params => {\n            return `<p class=\"text-cornflower-blue font-bold\"># of Employees <span class=\"text-grey\">${params.at().value}</span></p>`;\n          }\n        },\n        xAxis: {\n          show: false,\n          boundaryGap: false,\n          type: 'category',\n          axisLabel: {\n            fontSize: 10\n          }\n        },\n        yAxis: {\n          show: self.showYAxis,\n          type: 'value',\n          position: 'right',\n          axisLabel: {\n            fontSize: 10\n          }\n        },\n        series: [{\n          data: self.lineData,\n          type: 'line',\n          symbol: 'none',\n          lineStyle: {\n            color: self.lineColor\n          },\n          areaStyle: {\n            opacity: 0.8,\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: self.lineColor\n            }, {\n              offset: 1,\n              color: 'rgba(59, 130, 246, 0)'\n            }])\n          }\n        }]\n      }\n    };\n  },\n\n  mounted() {\n    this.setRefElement('lineChart');\n  }\n\n};","map":{"version":3,"mappings":";;;;;;;;AAOA;AACA;AAEA;EACAA,iBADA;EAEAC,qBAFA;EAGAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,WADA;MAEAC;IAFA,CALA;IASAE;MACAH,aADA;MAEAC;IAFA,CATA;IAaAG;MACAJ,sBADA;MAEAC;IAFA,CAbA;IAiBAI;MACAL,sBADA;MAEAC;IAFA;EAjBA,CAHA;;EAyBAK;IACA;IACA;MACAC;QACAC;UACAC,SADA;UAEAC,UAFA;UAGAL,mBAHA;UAIAD,aAJA;UAKAO;QALA,CADA;QAQAC;UACAC,mCADA;UAEAC,eAFA;UAGAC;YACAf,YADA;YAEAgB;cACAC;YADA;UAFA,CAHA;UASAC;YACA;UACA;QAXA,CARA;QAqBAC;UACAC,WADA;UAEAC,kBAFA;UAGArB,gBAHA;UAIAsB;YACAC;UADA;QAJA,CArBA;QA6BAC;UACAJ,oBADA;UAEApB,aAFA;UAGAa,iBAHA;UAIAS;YACAC;UADA;QAJA,CA7BA;QAqCAE,SACA;UACAnB,mBADA;UAEAN,YAFA;UAGA0B,cAHA;UAIAV;YACAC;UADA,CAJA;UAOAU;YACAC,YADA;YAEAX,uDACA;cACAY,SADA;cAEAZ;YAFA,CADA,EAKA;cACAY,SADA;cAEAZ;YAFA,CALA;UAFA;QAPA,CADA;MArCA;IADA;EA+DA,CA1FA;;EA2FAa;IACA;EACA;;AA7FA","names":["name","mixins","props","lineColor","type","default","lineData","showYAxis","top","bottom","data","lineOptions","grid","left","right","containLabel","tooltip","position","trigger","axisPointer","lineStyle","color","formatter","xAxis","show","boundaryGap","axisLabel","fontSize","yAxis","series","symbol","areaStyle","opacity","offset","mounted"],"sourceRoot":"src/components/universal/Charts","sources":["LineChart.vue"],"sourcesContent":["<template>\n  <div>\n    <v-chart ref=\"lineChart\" :option=\"lineOptions\"/>\n  </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\nimport resizeChart from \"@/mixins/resizeChart\";\n\nexport default {\n  name: \"LineChart\",\n  mixins: [ resizeChart ],\n  props: {\n    lineColor: {\n      type: String,\n      default: '#3B82F6'\n    },\n    lineData: {\n      type: Array,\n      default: () => []\n    },\n    showYAxis: {\n      type: Boolean,\n      default: true\n    },\n    top: {\n      type: [ String , Number],\n      default: '2%'\n    },\n    bottom: {\n      type: [ String , Number],\n      default: '0%'\n    }\n  },\n  data() {\n    const self = this\n    return {\n      lineOptions: {\n        grid: {\n          left: '0',\n          right: '0',\n          bottom: self.bottom,\n          top: self.top,\n          containLabel: self.showYAxis,\n        },\n        tooltip: {\n          position: cord => [cord[0] - 70, 0],\n          trigger: 'axis',\n          axisPointer: {\n            type: 'line' ,\n            lineStyle: {\n              color: self.lineColor\n            }\n          },\n          formatter: params => {\n            return `<p class=\"text-cornflower-blue font-bold\"># of Employees <span class=\"text-grey\">${params.at().value}</span></p>`\n          }\n        },\n        xAxis: {\n          show: false,\n          boundaryGap: false,\n          type: 'category',\n          axisLabel: {\n            fontSize: 10\n          }\n        },\n        yAxis: {\n          show: self.showYAxis,\n          type: 'value',\n          position: 'right',\n          axisLabel: {\n            fontSize: 10\n          }\n        },\n        series: [\n          {\n            data: self.lineData,\n            type: 'line',\n            symbol: 'none',\n            lineStyle: {\n              color: self.lineColor\n            },\n            areaStyle: {\n              opacity: 0.8,\n              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                {\n                  offset: 0,\n                  color: self.lineColor\n                },\n                {\n                  offset: 1,\n                  color: 'rgba(59, 130, 246, 0)'\n                }\n              ])\n            }\n          }\n        ]\n      }\n    }\n  },\n  mounted() {\n    this.setRefElement('lineChart')\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}